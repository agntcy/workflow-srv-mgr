// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package oasf

import "encoding/json"
import "fmt"
import "reflect"

type KeyValueObject struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Value corresponds to the JSON schema field "value".
	Value string `json:"value" yaml:"value" mapstructure:"value"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KeyValueObject) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in KeyValueObject: required")
	}
	if _, ok := raw["value"]; raw != nil && !ok {
		return fmt.Errorf("field value in KeyValueObject: required")
	}
	type Plain KeyValueObject
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = KeyValueObject(plain)
	return nil
}

type Locator struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations []KeyValueObject `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Digest corresponds to the JSON schema field "digest".
	Digest *string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type LocatorType `json:"type" yaml:"type" mapstructure:"type"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type LocatorType string

const LocatorTypeBinary LocatorType = "binary"
const LocatorTypeDockerImage LocatorType = "docker-image"
const LocatorTypeHelmChart LocatorType = "helm-chart"
const LocatorTypePyPackage LocatorType = "py-package"
const LocatorTypeSourceCode LocatorType = "source-code"
const LocatorTypeUnspecified LocatorType = "unspecified"

var enumValues_LocatorType = []interface{}{
	"binary",
	"unspecified",
	"helm-chart",
	"docker-image",
	"py-package",
	"source-code",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LocatorType) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LocatorType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LocatorType, v)
	}
	*j = LocatorType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Locator) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in Locator: required")
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in Locator: required")
	}
	type Plain Locator
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Locator(plain)
	return nil
}

type OasfJson struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations []KeyValueObject `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Authors corresponds to the JSON schema field "authors".
	Authors []string `json:"authors" yaml:"authors" mapstructure:"authors"`

	// CreatedAt corresponds to the JSON schema field "created_at".
	CreatedAt *int `json:"created_at,omitempty" yaml:"created_at,omitempty" mapstructure:"created_at,omitempty"`

	// Digest corresponds to the JSON schema field "digest".
	Digest string `json:"digest" yaml:"digest" mapstructure:"digest"`

	// Extensions corresponds to the JSON schema field "extensions".
	Extensions []OasfJsonExtensionsElem `json:"extensions" yaml:"extensions" mapstructure:"extensions"`

	// Locators corresponds to the JSON schema field "locators".
	Locators []Locator `json:"locators" yaml:"locators" mapstructure:"locators"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Skills corresponds to the JSON schema field "skills".
	Skills []OasfJsonSkillsElem `json:"skills" yaml:"skills" mapstructure:"skills"`

	// Version corresponds to the JSON schema field "version".
	Version string `json:"version" yaml:"version" mapstructure:"version"`
}

type OasfJsonExtensionsElem map[string]interface{}

type OasfJsonSkillsElem map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OasfJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["authors"]; raw != nil && !ok {
		return fmt.Errorf("field authors in OasfJson: required")
	}
	if _, ok := raw["digest"]; raw != nil && !ok {
		return fmt.Errorf("field digest in OasfJson: required")
	}
	if _, ok := raw["extensions"]; raw != nil && !ok {
		return fmt.Errorf("field extensions in OasfJson: required")
	}
	if _, ok := raw["locators"]; raw != nil && !ok {
		return fmt.Errorf("field locators in OasfJson: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in OasfJson: required")
	}
	if _, ok := raw["skills"]; raw != nil && !ok {
		return fmt.Errorf("field skills in OasfJson: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in OasfJson: required")
	}
	type Plain OasfJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = OasfJson(plain)
	return nil
}
