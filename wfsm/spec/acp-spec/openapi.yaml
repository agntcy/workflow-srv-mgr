openapi: 3.1.1
info:
  title: Agent Connect Protocol
  version: '0.1'
tags:
  - name: Agents
    description: >-
      Agents are AI workflows that can be configured and/or executed on this
      server.  This means that a client of this server can start a Run on any of
      the Agents supported by this server.

      Each agent may support different features of ACP, also each agent
      specifies the schemas of the objects carried by ACP for  configuration,
      input, output, interrupts and state. 

      Details of the ACP features and the schemas are kept in the ACP descriptor
      of the specific agent.  This object can be retrieved through this ACP
      interface or is found in the ACP extension of the agent record in the
      agent directory.

      See `Agent` and `AgentACPDescriptor` models below for more info.
  - name: Runs
    description: >-
      A Run represents an execution of an agent.

      The output of a Run can be a final result or an interrupt.

      Result from a run can be retrieved by polling or by blocking and waiting
      for the result.

      See `Run`  and `RunOutput` models below for more info.
  - name: Threads
    description: >-
      If supported by the agent, Run can be grouped in Threads. When a Run is
      created without specifying a Thread ID , a new thread is automatically
      created and a Thread ID is returned together with the created Run. At the
      end of the Run, the server keeps a thread state associated to the thread.

      When a Run is created specifying a Thread ID, the agent uses the previous
      state of the thread together with the provided input. 

      A run can be created on a thread **only** if there is no run in the
      `pending` status on the same thread. 

      Current thread state is accessible through this API.

      See `Thread` for more info.
paths:
  /agents/search:
    post:
      tags:
        - Agents
      summary: Search Agents
      description: |-
        Returns a list of agents matching the criteria provided in the request.

        This endpoint also functions as the endpoint to list all agents.
      operationId: search_agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentSearchRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                type: array
                title: Matching Agent List
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agents/{agent_id}:
    get:
      tags:
        - Agents
      summary: Get Agent
      description: Get an agent by ID.
      operationId: get_agent_by_ID
      parameters:
        - description: The ID of the agent.
          required: true
          schema:
            type: string
            format: uuid
            title: Agent Id
            description: The ID of the agent.
          name: agent_id
          in: path
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /agents/{agent_id}/descriptor:
    get:
      tags:
        - Agents
      summary: Get Agent ACP Descriptor from its id
      description: Get agent ACP descriptor by agent ID.
      operationId: get_acp_descriptor_by_id
      parameters:
        - description: The ID of the agent.
          required: true
          schema:
            type: string
            format: uuid
            title: Agent Id
            description: The ID of the agent.
          name: agent_id
          in: path
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentACPDescriptor'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runs:
    post:
      tags:
        - Runs
      summary: Create Background Run
      description: >-
        Create a run, return the run descriptor immediately. Don't wait for the
        final run output.
      operationId: create_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunCreate'
        required: true
      callbacks:
        runstatuschange:
          '{$request.body#/webhook}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Run'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runs/search:
    post:
      tags:
        - Runs
      summary: Search Runs
      description: |-
        Search for runs.

        This endpoint also functions as the endpoint to list all runs.
      operationId: search_runs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunSearchRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Run'
                type: array
                title: Response Search Agents Agents Search Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runs/{run_id}:
    parameters:
      - description: The ID of the agent.
        required: true
        schema:
          type: string
          format: uuid
          title: Run Id
          description: The ID of the run.
        name: run_id
        in: path
    post:
      tags:
        - Runs
      summary: Resume an interrupted Run
      description: >-
        Provide the needed input to a run to resume its execution. Can only be
        called for runs that are in the interrupted state Schema of the provided
        input must match with the schema specified in the agent specs under
        interrupts for the interrupt type the agent generated for this specific
        interruption.
      operationId: resume_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumePayloadSchema'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Runs
      summary: Delete a run. If running, cancel and then delete.
      description: Cancel a run.
      operationId: delete_run
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Runs
      summary: Get a previously created Run
      description: Get a run from its ID. Don't wait for the final run output.
      operationId: get_run
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runs/{run_id}/output:
    get:
      tags:
        - Runs
      summary: Retrieve last output of a run if available
      description: >-
        Retrieve the last output of the run.  The output can be:
          * an interrupt, this happens when the agent run status is `interrupted`
          * the final result of the run, this happens when the agent run status is `success`
          * an error, this happens when the agent run status is `error` or `timeout`


        If the block timeout is provided and the current run status is
        `pending`, this call blocks until the state changes or the timeout
        expires. 

        If no timeout is provided or the timeout has expired and  run status is
        `pending`, this call returns `204` with no content.
      operationId: get_run_output
      parameters:
        - description: The ID of the run.
          required: true
          schema:
            type: string
            format: uuid
            title: Run Id
            description: The ID of the run.
          name: run_id
          in: path
        - name: block_timeout
          in: query
          required: false
          schema:
            type: integer
            title: Block Timeout
            description: >-
              In case the run status is `pending`, this call blocks until the
              status change or `timeout` seconds have passed.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOutput'
        '204':
          description: No Output Available
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runs/{run_id}/stream:
    get:
      tags:
        - Runs
      summary: Stream the run output
      description: >-
        Send a stream of events using Server-sent events (SEE). See
        <https://html.spec.whatwg.org/multipage/server-sent-events.html> for
        details.
      operationId: get_run_stream
      parameters:
        - description: The ID of the run.
          required: true
          schema:
            type: string
            format: uuid
            title: Run Id
            description: The ID of the run.
          name: run_id
          in: path
      responses:
        '200':
          description: >-
            Stream of agent results either as `RunResult` objects or custom
            objects, according to the specific streaming mode requested. Note
            that the stream of events is carried using the format specified in
            SSE spec `text/event-stream`
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/RunOutputStream'
        '204':
          description: No Output Available
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads:
    post:
      tags:
        - Threads
      summary: Create an empty Thread
      description: >-
        Create an empty thread. This is useful to associate metadata to a
        thread.
      operationId: create_thread
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadCreate'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/search:
    post:
      tags:
        - Threads
      summary: Search Threads
      description: |-
        Search for threads.

        This endpoint also functions as the endpoint to list all threads.
      operationId: search_threads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadSearchRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Thread'
                type: array
                title: Response Search Agents Agents Search Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}:
    parameters:
      - description: The ID of the thread.
        required: true
        schema:
          type: string
          format: uuid
          title: Thread ID
          description: The ID of the thread.
        name: thread_id
        in: path
    delete:
      tags:
        - Threads
      summary: Delete a thread. If the thread contains any pending run, deletion fails.
      description: Delete a thread.
      operationId: delete_thread
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Threads
      summary: Get a previously created Thread
      description: 'Get a thread from its ID. '
      operationId: get_thread
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/state:
    get:
      tags:
        - Threads
      summary: Retrieve the current state associated with the thread
      description: Retrieve the the current state associated with the thread
      operationId: get_thread_state
      parameters:
        - description: The ID of the thread.
          required: true
          schema:
            type: string
            format: uuid
            title: Thread Id
            description: The ID of the thread.
          name: thread_id
          in: path
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadStateSchema'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/history:
    get:
      tags:
        - Threads
      summary: Retrieve the list of runs and associated state at the end of each run.
      description: Retrieve ordered list of runs for this thread in chronological order.
      operationId: get_thread_history
      parameters:
        - description: The ID of the thread.
          required: true
          schema:
            type: string
            format: uuid
            title: Thread Id
            description: The ID of the thread.
          name: thread_id
          in: path
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Run'
                type: array
                title: List of runs for the specified thread
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runs/{run_id}/threadstate:
    get:
      tags:
        - Threads
      summary: Retrieve the thread state at the end of the run
      description: >-
        This call can be used only for agents that support thread, i.e. for Runs
        that specify a thread ID. It can be called only on runs that are in
        `success` status. It returns the thread state at the end of the Run. Can
        be used to reconstruct the evolution of the thread state in its history.
      operationId: get_run_threadstate
      parameters:
        - description: The ID of the run.
          required: true
          schema:
            type: string
            format: uuid
            title: Run Id
            description: The ID of the run.
          name: run_id
          in: path
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadStateSchema'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Agent:
      title: Agent
      description: A description of an agent supported by this server
      type: object
      properties:
        agent_id:
          type: string
          format: uuid
          title: Agent Id
          description: Unique identifier of the agent in this server.
        metadata:
          $ref: '#/components/schemas/AgentMetadata'
      required:
        - agent_id
        - metadata
    AgentMetadata:
      title: Agent Metadata
      description: Basic information associated to the agent
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/AgentRef'
        description:
          description: >-
            Description of this agent, which should include what the intended
            use is, what tasks it accomplishes and how uses input and configs to
            produce the output and any other side effect
          title: Description
          type: string
      required:
        - ref
        - description
    AgentRef:
      title: Agent Reference
      description: >-
        Reference to an Agent Record in the Agent Directory, it includes name,
        version and a locator.
      type: object
      properties:
        name:
          description: Name of the agent that identifies the agent in its record
          title: Name
          type: string
        version:
          description: >-
            Version of the agent in its record. Should be formatted according to
            semantic versioning (https://semver.org)
          title: Version
          type: string
        url:
          title: Agent Record URL
          description: URL of the record. Can be a network location or a file.
          type: string
          format: uri
      required:
        - name
        - version
    AgentACPDescriptor:
      title: Agent ACP Descriptor
      description: >-
        Describe all the ACP specs of an agent, including schemas and protocol
        features.
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/AgentMetadata'
        specs:
          $ref: '#/components/schemas/AgentACPSpec'
      required:
        - metadata
        - specs
    AgentACPSpec:
      title: Agent ACP Specs
      description: >-
        Specification of agent capabilities, config, input, output, and
        interrupts
      type: object
      properties:
        capabilities:
          type: object
          title: Agent Capabilities
          description: Declares what invocation features this agent is capable of.
          properties:
            threads:
              type: boolean
              title: Thread Support
              default: false
              description: >-
                This is `true` if the agent supports run threads. If this is
                `false`, then the threads tagged with `Threads` are not
                available. If missing, it means `false`
            interrupts:
              type: boolean
              title: Interrupt Support
              default: false
              description: >-
                This is `true` if the agent runs can interrupt to request
                additional input and can be subsequently resumed. If
                missing, it means `false`
            callbacks:
              type: boolean
              title: Callback Support
              default: false
              description: >-
                This is `true` if the agent supports a webhook to report run
                results. If this is `false`, providing a `webhook` at run
                creation has no effect. If missing, it means `false`
            streaming:
              type: object
              title: Streaming Modes
              description: >-
                Supported streaming modes. If missing, streaming is not
                supported.  If no mode is supported attempts to stream
                output will result in an error.
              properties:
                result:
                  type: boolean
                  title: Result Streaming
                  description: >-
                    This is `true` if the agent supports result streaming.
                    If `false` or missing, result streaming is not
                    supported. Result streaming consists of a stream of
                    objects of type `RunResult`, where each one sent over
                    the stream fully replace the previous one.
                custom:
                  type: boolean
                  title: Custom Objects Streaming
                  description: >-
                    This is `true` if the agent supports custom objects
                    streaming. If `false` or missing, custom streaming is
                    not supported. Custom Objects streaming consists of a
                    stream of object whose schema is specified by the agent
                    ACP descriptor under `specs.custom_streaming_update`.
        input:
          type: object
          description: >-
            This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs:
            https://spec.openapis.org/oas/v3.1.1.html#schema-object
          examples:
            - type: object
              required:
                - name
              properties:
                name:
                  type: string
                address:
                  type: string
                age:
                  type: integer
                  format: int32
                  minimum: 0
        output:
          type: object
          description: >-
            This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs:
            https://spec.openapis.org/oas/v3.1.1.html#schema-object
          examples:
            - type: object
              required:
                - name
              properties: null
              name:
                type: string
              address:
                type: string
              age:
                type: integer
                format: int32
                minimum: 0
        custom_streaming_update:
          type: object
          description: >-
            This describes the format of an Update in the streaming.  Must
            be specified if `streaming.custom` capability is true and cannot
            be specified otherwise. Format follows:
            https://spec.openapis.org/oas/v3.1.1.html#schema-object
          examples:
            - type: object
              required:
                - name
              properties: null
              name:
                type: string
              address:
                type: string
              age:
                type: integer
                format: int32
                minimum: 0
        thread_state:
          type: object
          description: >-
            This describes the format of ThreadState.  Cannot be specified
            if `threads` capability is false. If not specified, when
            `threads` capability is true, then the API to retrieve
            ThreadState from a Thread or a Run is not available. This object
            contains an instance of an OpenAPI schema object, formatted as
            per the OpenAPI specs:
            https://spec.openapis.org/oas/v3.1.1.html#schema-object
          examples:
            - type: object
              required:
                - name
              properties: null
              name:
                type: string
              address:
                type: string
              age:
                type: integer
                format: int32
                minimum: 0
        config:
          type: object
          description: >-
            This object contains an instance of an OpenAPI schema object,
            formatted as per the OpenAPI specs:
            https://spec.openapis.org/oas/v3.1.1.html#schema-object
          examples:
            - type: object
              required:
                - name
              properties: null
              name:
                type: string
              address:
                type: string
              age:
                type: integer
                format: int32
                minimum: 0
        interrupts:
          type: array
          description: >-
            List of possible interrupts that can be provided by the agent.
            If `interrupts` capability is true, this needs to have at least
            one item.
          items:
            type: object
            properties:
              interrupt_type:
                description: >-
                  Name of this interrupt type. Needs to be unique in the
                  list of interrupts.
                title: Interrupt Type Name
                type: string
              interrupt_payload:
                type: object
                description: >-
                  This object contains an instance of an OpenAPI schema
                  object, formatted as per the OpenAPI specs:
                  https://spec.openapis.org/oas/v3.1.1.html#schema-object
                examples:
                  - type: object
                    required:
                      - name
                    properties: null
                    name:
                      type: string
                    address:
                      type: string
                    age:
                      type: integer
                      format: int32
                      minimum: 0
              resume_payload:
                type: object
                description: >-
                  This object contains an instance of an OpenAPI schema
                  object, formatted as per the OpenAPI specs:
                  https://spec.openapis.org/oas/v3.1.1.html#schema-object
                examples:
                  - type: object
                    required:
                      - name
                    properties: null
                    name:
                      type: string
                    address:
                      type: string
                    age:
                      type: integer
                      format: int32
                      minimum: 0
            required:
              - interrupt_type
              - resume_payload
              - interrupt_payload
      required:
        - capabilities
        - input
        - output
        - config
    AgentSearchRequest:
      properties:
        name:
          type: string
          title: Name
          description: Match all agents with the name specified.
        version:
          type: string
          title: Version
          description: >-
            Match all agents with the version specified. Formatted according to
            semantic versioning (https://semver.org)
        limit:
          type: integer
          title: Limit
          description: Maximum number to return.
          default: 10
          minimum: 1
          maximum: 1000
        offset:
          type: integer
          title: Offset
          description: Offset to start from.
          default: 0
          minimum: 0
      type: object
      title: AgentSearchRequest
      description: Payload for listing agents.
    ErrorResponse:
      type: string
      title: ErrorResponse
      description: Error message returned from the server
    RunCreate:
      type: object
      title: Agent Run Creation
      description: Payload for creating a run.
      properties:
        agent_id:
          type: string
          format: uuid
          title: Agent Id
          description: The ID of the agent.
        thread_id:
          type: string
          format: uuid
          title: Agent ID
          description: >-
            Optional Thread ID wher the Run belongs to. This can be used only
            for agents supporting Threads.
        input:
          $ref: '#/components/schemas/InputSchema'
        metadata:
          type: object
          title: Metadata
          description: >-
            Metadata to assign to the run. Optional free format metadata to
            attach to the run.
        config:
          $ref: '#/components/schemas/ConfigSchema'
        webhook:
          type: string
          format: uri
          title: Status change webhook
          description: >-
            Webhook to call upon change of run status. This is a url that
            accepts a POST containing the `Run` object as body. See Callbacks
            definition.
        streaming:
          $ref: '#/components/schemas/StreamingMode'
          title: Streaming Mode
          description: >-
            If populated, indicates that the client requests to stream results
            with the specified streaming mode. The requested streaming mode must
            be one of the one supported by the agent as declared in agent ACP
            descriptor  under `specs.capabilities`
      required:
        - agent_id
    StreamingMode:
      type: string
      enum:
        - result
        - custom
    Run:
      title: Agent Run
      description: Holds all the information of a run
      properties:
        creation:
          $ref: '#/components/schemas/RunCreate'
        run_id:
          type: string
          format: uuid
          title: Run Id
          description: The ID of the run.
        agent_id:
          type: string
          format: uuid
          title: Agent Id
          description: The agent that was used for this run.
        thread_id:
          type: string
          format: uuid
          title: Agent ID
          description: >-
            Optional Thread ID wher the Run belongs to. This is populated only
            for runs on agents agents supporting Threads.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The time the run was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: The last time the run was updated.
        status:
          $ref: '#/components/schemas/RunStatus'
          title: Status
          description: >-
            The status of the run. One of 'pending', 'error', 'success',
            'timeout', 'interrupted'.
      required:
        - creation
        - run_id
        - agent_id
        - created_at
        - updated_at
        - status
    RunStatus:
      type: string
      enum:
        - pending
        - error
        - success
        - timeout
        - interrupted
    RunSearchRequest:
      properties:
        agent_id:
          type: string
          format: uuid
          title: Agent Id
          description: Matches all the Runs associated with the specified Agent ID.
        status:
          $ref: '#/components/schemas/RunStatus'
          title: Status
          description: >-
            Matches all the Runs associated with the specified status. One of
            'pending', 'error', 'success', 'timeout', 'interrupted'.
        metadata:
          type: object
          title: Metadata Filter
          description: >-
            Matches all threads for which metadata has  keys and values equal to
            those specified in this object.
        limit:
          type: integer
          title: Limit
          description: Maximum number to return.
          default: 10
          minimum: 1
          maximum: 1000
        offset:
          type: integer
          title: Offset
          description: Offset to start from.
          default: 0
          minimum: 0
      type: object
      title: Run Search Request
      description: Payload for listing runs.
    RunOutput:
      title: Run Output
      description: Output of a Run. Can be the final result or an interrupt.
      oneOf:
        - $ref: '#/components/schemas/RunResult'
        - $ref: '#/components/schemas/RunInterrupt'
        - $ref: '#/components/schemas/RunError'
      discriminator:
        propertyName: type
        mapping:
          result: '#/components/schemas/RunResult'
          interrupt: '#/components/schemas/RunInterrupt'
          error: '#/components/schemas/RunError'
    RunResult:
      title: Run Result
      description: Final result of a Run.
      type: object
      properties:
        type:
          title: Output Type
          type: string
          enum:
            - result
        run_id:
          type: string
          format: uuid
          title: Run Id
          description: The ID of the run.
        status:
          title: Run Status
          description: >-
            Status of the Run when this result was generated. This is
            particurarly useful when this data structure is used for streaming
            results. As the server can indicate an interrupt or an error
            condition while streaming the result.
          $ref: '#/components/schemas/RunStatus'
        result:
          $ref: '#/components/schemas/OutputSchema'
      required:
        - type
        - run_id
        - status
        - result
    RunOutputStream:
      type: object
      title: Run Output Stream Event
      description: >-
        Server-sent event containing one agent output event. Actual event type
        is carried inside the data.
      properties:
        id:
          type: string
          description: Unique identifier of the event
          title: Event ID
        event:
          type: string
          enum:
            - agent_event
          description: >-
            Event type. This is the constant string `agent_event` to be
            compatible with SSE spec. The actual type differentiation is done in
            the event itself.
        data:
          title: Stream Event Payload
          description: >-
            A serialized JSON data structure carried in the SSE event data
            field. The event can carry either a full `RunResult`, if streaming
            mode is `result` or an custom update if streaming mode is `custom`
          oneOf:
            - $ref: '#/components/schemas/RunResult'
            - $ref: '#/components/schemas/CustomRunResultUpdate'
          discriminator:
            propertyName: type
            mapping:
              result: '#/components/schemas/RunResult'
              custom: '#/components/schemas/CustomRunResultUpdate'
      required:
        - id
        - event
        - data
    CustomRunResultUpdate:
      title: Custom Run Result Update
      description: >-
        Object holding a custom defined update of the agent result during
        streaming.
      type: object
      properties:
        type:
          title: Output Type
          type: string
          enum:
            - custom
        run_id:
          type: string
          format: uuid
          title: Run Id
          description: The ID of the run.
        status:
          title: Run Status
          description: Status of the Run when this result was generated
          $ref: '#/components/schemas/RunStatus'
        update:
          $ref: '#/components/schemas/StreamUpdateSchema'
      required:
        - type
        - run_id
        - status
        - update
    RunError:
      title: Run Error
      description: Run terminated with an error
      type: object
      properties:
        type:
          title: Output Type
          type: string
          enum:
            - error
        run_id:
          type: string
          format: uuid
          title: Run Id
          description: The ID of the run.
        errcode:
          type: integer
          title: Error Code
          description: code of the error
        description:
          type: string
          title: Error Description
          description: description of the error
      required:
        - type
        - run_id
        - errcode
        - description
    RunInterrupt:
      title: Run Interrupt
      description: Interrupt occurred during a Run
      type: object
      properties:
        type:
          title: Output Type
          type: string
          enum:
            - interrupt
        interrupt:
          $ref: '#/components/schemas/InterruptPayloadSchema'
      required:
        - type
        - interrupt
    InputSchema:
      type: object
      title: Input Schema
      description: >-
        The input to the agent. The schema is described in agent ACP descriptor
        under 'spec.thread_state'.'input'.
    OutputSchema:
      type: object
      title: Output Schema
      description: >-
        The output of the agent. The schema is described in agent ACP descriptor
        under 'spec.output'.
    ConfigSchema:
      type: object
      title: Config
      description: >-
        The configuration for this agent. The schema is described in agent ACP
        descriptor under 'spec.config'. If missing, default values are used.
    ThreadStateSchema:
      type: object
      title: Thread State Schema
      description: >-
        The thread state. The schema is described in agent ACP descriptor under
        'spec.thread_state'.
    StreamUpdateSchema:
      type: object
      title: Stream Update Schema
      description: >-
        An update in the SSE event streaming where streaming mode is set to
        custom. The schema is described in agent ACP descriptor under
        'spec.custom_streaming_update'.
    InterruptPayloadSchema:
      type: object
      title: Interrupt Payload
      description: >-
        This schema describes the interrupt payload. Actual schema describes a
        polimorphic object, which means a schema structured with `oneOf` and
        `discriminator`. The discriminator is the `interrupt_type`, while the
        schemas will be the ones defined in the agent spec under
        `interrupts`/`interrupt_payload` For example:          oneOf:
          - $ref: '#/components/schemas/ApprovalInterruptPayload'
          - $ref: '#/components/schemas/QuestionInterruptPayload'
        discriminator:
          propertyName: interruput_type
          mapping:
            approval: '#/components/schemas/ApprovalInterruptPayload'
            question: '#/components/schemas/QuestionInterruptPayload'
    ResumePayloadSchema:
      type: object
      title: Resume Payload Schema
      description: >-
        This schema describes the resume payload after an interrupt. Actual
        schema describes a polimorphic object, which means a schema structured
        with `oneOf` and `discriminator`. The discriminator is the
        `interrupt_type`, while the schemas will be those defined in the agent
        spec under `interrupts`/`resume_payload` For example:          oneOf:
          - $ref: '#/components/schemas/ApprovalResumePayload'
          - $ref: '#/components/schemas/QuestionResumePayload'
        discriminator:
          propertyName: interrupt_type
          mapping:
            approval: '#/components/schemas/ApprovalResumePayload'
            question: '#/components/schemas/QuestionResumePayload'
    ThreadCreate:
      type: object
      title: Thread
      description: Detail of an empty thread to be created.
      properties:
        agent_id:
          type: string
          title: Agent ID
          description: Identifier of the agent this thread is executed on
        metadata:
          type: object
          title: Metadata
          description: Free form metadata for this thread
      required:
        - agent_id
    ThreadSearchRequest:
      properties:
        agent_id:
          type: string
          format: uuid
          title: Agent Id
          description: Matches all threads associated with the specified agent ID.
        metadata:
          type: object
          title: Metadata Filter
          description: >-
            Matches all threads for which metadata has  keys and values equal to
            those specified in this object.
        limit:
          type: integer
          title: Limit
          description: Maximum number to return.
          default: 10
          minimum: 1
          maximum: 1000
        offset:
          type: integer
          title: Offset
          description: Offset to start from.
          default: 0
          minimum: 0
      type: object
      title: Thread Search Request
      description: Payload for listing runs.
    Thread:
      type: object
      title: Thread
      description: >-
        Represents a collection of consecutive runs on an agent. Thread is
        associated with a state
      properties:
        thread_id:
          type: string
          title: Thread ID
          description: unique identifier of a thread
        agent_id:
          type: string
          title: Agent ID
          description: Identifier of the agent this thread is executed on
        metadata:
          type: object
          title: Metadata
          description: Free form metadata for this thread
      required:
        - thread_id
        - agent_id
